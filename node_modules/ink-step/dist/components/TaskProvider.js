"use strict";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const React = require('react')

const createStepHistory = require('../createStepHistory');

class TaskProvider extends React.Component {
  constructor(props, context) {
    super(props, context);
    this.history = props.history;
    this.task = _objectSpread({}, this.history.task);
    this.state = {};
  }

  render({
    children
  }) {
    // const { children } = this.props;
    // console.log('Provider render', this.props, this.state, this.context)
    return children;
  }

  getChildContext() {
    return {
      step: {
        history: this.history,
        task: this.task
      }
    };
  }

  componentDidMount() {
    this.unlisten = this.history.listen(task => {
      // console.log('listen!!!!\n', task, this.history.task);
      if (this.state.task !== task) {
        // console.log('1', this.task, task);
        Object.assign(this.task, task); // console.log('2', this.task);
        // console.log(this.context)

        this.setState({
          task
        });
      }
    });
  }

  componentWillUnmount() {
    this.unlisten();
  }

}

module.exports = TaskProvider;